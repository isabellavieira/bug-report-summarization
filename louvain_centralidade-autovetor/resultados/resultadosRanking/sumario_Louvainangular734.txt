mhevery commented if you enqueue from controller then it will be before , but if you enqueue from directive then it will be after . the issue is that most frameworks have a string template which then gets rendered into a string which then gets innerhtml . in such a world it is very clear where the beggining and end of render is . with angular that is not the case . since angular has concept of directives , a directive may unroll a loop , which can the instantiate a controller , which can than modify the model which then causes more dom updates . this makes it hard to have clear line in a send as to where the dom update begins and ends . so in order for us to help you , what is the specific problem which you are trying to solve ? if you just want to apply special animations to do , then those animations need to be triggered from within directives , in which case the $asynceval is exactly what you want as the current dom update has become stable .

sebastianconcept commented this is a really common need and pretty basic and intuitive . i don 't get why the angular team won 't just emit an event . anyways ... here is what i did : define (['angular'], function (angular) { 'use strict '; return angular .module('app.common.after-render', []) .directive('afterrender', [ '$timeout', function ($timeout) { var def = { restrict : 'a', terminal : true , transclude : false , link : function (scope, element , attrs ) { if (attrs) { scope .$eval(attrs.afterrender) } scope .$emit('onafterrender') } }; return def ; }]); }); then you can do : <div after -render></div> or with any useful expression like : <div after -render="$emit='onafterthisthingrendered'"></div>

wuxiaoying commented here 's a use case : i have a directive that draws a canvas on top of div elements . the canvas needs to know the div positions in order to draw the right diagram . this means that it has to update when the div finishes rendering (the div 's size depends on text that the directive also sets ) so that it knows its top , left , height , and width properties . i 've used the timeout hack to get it to render after but its still not reliable .

kstep commented quick example : we load some partial with <ng:view/>, then this partial is rendered (e.g. a lot of ng :repeat's and other ng :bind stuff is evaluated ), and as the result of this (potentially long ) process dom becomes stable (i guess after the end of digest cycle ), so it 's safe to apply some special effects to it , like drag -n-drop handling , fading in /out, custom event handlers binding , applying some jquery plugins effects like masonry , lazyload (to load images in a lazy fashion ), or run facebook handlers (it's a real problem for us , as facebook xfbml parser requires already existing fb :* dom nodes , which is difficult to guarantee with asynchronous dom rendering ). for now we use $browser.defer() here and there , but it 's a very bad thing , we 'd prefer more robust and correct way to do it .

todiadiyatmo commented @kstep @eprouver hi , i 'am quite new to angular . the solution for this problem for me is to detect the dom element change on the parrent element where the ng -repeat attribute apply . so for @eprouver fiddle , i attach a listener to the element , and trigger the draggable function after change . i use this http ://benalman.com/projects/jquery-resize-plugin/ plugin for the listener . here is my fiddle http ://jsfiddle.net/kjbqg/ in my personal opinion i think my code is bit cleaner cheers , todi

erkulas commented this is a side -effect of the all async nature of the angularjs setup . there are other side -effects as well . for me total async behaviour (all elements on page doing their own thing ) is not the best solution - there has to be some balance . anyway . we solved this by placing a 0 -size transparent gif in the template and putting a onload event that runs when the image is rendered in dom . made a directive out of this . i could make a jsfiddle if anybody is interested . this solution also has it 's drawbacks due to the way angularjs operates . for example we put the image in the template that had a ng -repeat loop and we wanted to access the looped elements after they are in dom . it only started working when we put the image actually inside the loop element (s) because dom is the angular templating system and the other parts ended up in dom before the looped elements did . so . this method works but with quirks that you have to account for .

kaidanov commented is there some kind of feature that listens to the whole page dynamically rendered and the whole scopes are digested ? i have a dunamically built page with ng -repeats inside each other with multiple templates on one view ..how should i catch the rendered and scope is ready event ? used $browser notifywhennooutstandingrequests event but work only first time on loading the page .second time ,it doesn 't fill the context of my scope .

paramburu commented i 'm also having problems to detect when the ngview has ended rendering . the task need to get the ngview "container"s height but when the event $viewcontentloaded triggers , height is still 0 . what should i do ? i 'll appreciate a little help .

shadowii commented i ran into a similar problem and found a solution similar to eprouver 's. i have a popup -style directive (very similar to angular -ui's) but it supports ajax -driven data and templates . the popup is properly positioned relative to its parent based on its size , which , based on the data and template , can vary . unfortunately , i haven 't seen a way to get a notification from angular that the popup 's html has been updated , so i could never properly position the popup relative to the parent after data load . anyway , i noticed that angular 's $animate service has functions with a callback that meets my needs . i 'm guessing it 's doing something similar to eprouver 's solution but behind the scenes . i used the $animate.addclass function to add a class to my directive element after my data has been loaded . worked like a charm . would still like to see something a little less hacky , though ...

abdulazeezsk commented hi , i need similar functionality in my code . directive template 's expressions are not evaluated by the time listener in watch gets called . here is the code , http ://stackoverflow.com/questions/12748392/expressions-are-not-evaluated-in-watch-of-custom-directive-of-angularjs didn 't get any reply on google group and stack overflow ? can anyone help me with this ? thanks , abdul

