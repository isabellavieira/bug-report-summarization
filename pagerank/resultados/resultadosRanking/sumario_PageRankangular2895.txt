spaceribs commented @jimmywarting yes you could do something like this , but that requires 2 compiles when only one should be needed . a directive should be self contained , not requiring other core directives to be used alongside it . technically you could do the same thing by setting the templateurl to '/views/loader.html' with : <div ng -include="'/views/'+model.type+'-type.html'"></div> but that now requires 2 ajax calls and 2 child scopes when you only really needed one . being able to grab a template type from the scope and apply it to the templateurl dynamically is a long sought after feature that directives could benefit from , but i believe it 's a "chicken before the egg " issue looking at the code myself , and would require a major revamp in the order of operations for compiling a directive .

filiptc commented +1 to this feature request . not being able to access scope from templateurl function nor getting scope -preprocessed attributes forces workaround use of link and manual $http loading of templates .

localpcguy commented this should be reopened . either scope should be accessible as an attribute of the templateurl function or scope bindings should be evaluated before attributes are passed to the function

spaceribs commented @btford yeah , i was planning on it , i 'll submit something tonight after work .

vict -shevchenko commented it seems that i want the same ... that tattrs .prop in templateurl function are compiled with its parent scope . so tattrs .prop(templateurl func ) == iattr .prop(link func ); but now tattrs .prop is "{{prop}}" and iattrs .prop is "propertynamefromparentscope". is not this issue about it ?

vict -shevchenko commented ok , can you then point me to a proper solution of the issue ? my need is in dynamically change templateurl based on parent scope parameters , that i can pass to a directive attributes . me situation is next , there is a directive that based on 'id' and 'type' (8 different types ) displays some data . for each 'type' there is a different template , but same controller can be used . my desire is to eliminate copy -pasting like using 8 ng -includes or similar . so i think directive that can dynamically load proper html based on 'type' is a good idea . my current solution is link : function (scope, ielement , iattrs ) { var templateurl = 'views/' + iattrs .type + '.html'; $http.get(templateurl, {cache: $templatecache}).success(function(tplcontent){ ielement .append($compile(tplcontent)(scope)); }); } is it also terrible by its nature ? what approach you recommend to follow in such cases ? thanks .

spaceribs commented if the purpose of a directive is to modularize functionality , we 've been given the native ability to generate a templateurl based on a function which receives only undigested element attributes . it may be difficult to change the functionality over to allow access to the scope , but it certainly makes more sense than to "stop there ".

cxres commented +1 to this request . desperately need this feature . the nginclude trick is not at all ideal ! the same problem exists in ngroute as well , which after all is a directive . #2295

spaceribs commented @caitp this is a feature request because it doesn 't make sense to me to have to rely on core directives or multiple ajax calls /scopes to make this work , can you elaborate your position ?

caitp commented templates can (and do ) contain logic and behaviour , not just presentation . your directive should know exactly what it 's going to have under the hood , and if it really can 't know (ie, ui -view for instance ), it should behave as a proper structural directive . components (say a custom button or a header or something ) should know what their dom is going to look like ahead of time . template functions allow a few things , like requesting a slightly different template url depending on the deployment url (say i want to serve a different url depending on whether i 'm hosted from gh -pages or from localhost , eg for a slide show ). they can also serve different templates based on app configuration , which was proposed for ui -bootstrap last year . they basically let you configure an app for different deployments , or other things which are basically static , but you don 't necessarily know ahead of time . they might want to use an attribute value , but this behaviour should be static , not runtime -changeable. trying to do too much dynamic stuff in the template and template url functions is just going to create more headaches than anything else . yes , it would be a powerful feature , but not necessarily a useful one . the usefulness of it is greatly exaggerated by people who are most likely trying to solve the wrong problem with the wrong tool . (no offense , we 've all done this .) in order to keep your app manageable , you should definitely minimize how dynamic your directives can be . configuring templates (attached to behaviour ) are going to be a nightmare , but if you really want to do that , ng -include already exists . ng -switch already exists . that said , i don 't know if anyone else agrees with me , maybe igor thinks super -dynamic template functions are a great idea . but i feel like the end result of it is this : creating yet more ways in angular to accomplish the same given task (runtime-dynamic presentation ). making it easier to shoot yourself in the foot by creating unmanageable directives . making the directive api even more needlessly complicated than it already is , for dubious reasons . harming performance by encouraging people to run even more complicated logic in their template functions during compilation of the dom (which may happen many times over the course of an application ). moving the angular learning curve further down the x axis (creating even more to learn about for new developers who just want to make their super awesome vc -funded online -pokemon-trading-and-social-media web application and become superstars ). angular is already very complex and very powerful , this is increasing complexity but not so much power . i don 't know if anyone else agrees with the points i 'm making here , but honestly if you feel you need super -dynamic template functions , you 're probably taking the wrong approach to solving your problem , and you 're probably mis -identifying the problem you 're trying to solve .

