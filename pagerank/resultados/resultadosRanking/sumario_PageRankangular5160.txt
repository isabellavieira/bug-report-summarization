mattatbt commented has there been any further progress on this issue ? i have the same use case as @cfchase and would be interested in applying move animations to $index changes

trickpattyfh20 commented does anyone have an example of a recommended workaround in the mean time ? maybe adding a class to all the siblings of the target element and then animating that class , then removing the class ?

matsko commented i see what you mean . you 're expecting a move to be triggered when add to beginning and add to end are called . right now it is only triggering it when you apply a sort right ?

schmod commented agreed that the current behavior makes very little sense . among other things , one would expect that ng -move could be used to animate a list being shuffled . however , because ng -move is not necessarily get applied when an elements ' $index changes , this is not possible . here 's a plunkr that illustrates the problem : http ://plnkr.co/edit/oavwl83hyncxag5r424v?p=preview note that swapping the first and last elements of an ng -repeat triggers ng -move on every element except for the first one (which is being moved to the bottom of the list ).

akoprow commented @igorminar, thanks for the answer . what i 'm trying to do is quite simple : i have a list of elements that i display horizontally . elements are absolute positioned with a left property computed based on their $index. their ordering sometimes changes in which case i 'd like to animate them moving to appropriate positions . this fiddle should make it clear : http ://jsfiddle.net/koper/suzr5. it 's a pretty good abstraction of what i 'm trying to do , except i 'd like to animate the blocks changing their positions (which is not happening in the fiddle ). i 'm guessing i could just $watch the array on the scope , and animate the elements in the listener . however , it feels "wrong" to circumvent the animation framework in this way . given mine and @cfchase's use -cases it kinda sounds like there are two kinds of moves one may be interested in : relative (ordering within the array changes ) and absolute (index changes ). btw . i 'd be happy to try to work it out and submit a pull request if you guys are interested in that and if we achieve a consensus on how to address that .

akoprow commented @matsko i 'm not sure if i have a good suggestion as i don 't think i even have a good grasp of the definition of what constitutes a move in the current implementation . one obvious approach would be to have some sort of a flag indicating whether it 's an "index-based" or "regular" move . in any case i agree that it would be good to have some sort of event triggered whenever item 's index changes .

swarajban commented second @akoprow, i am trying to do something similar and wish that the ng -move classes would be added /removed when the $index of the element changes

tomsdev commented i agree with @akoprow, the current move event is not what i expected it to be . i expected it to be raised when the $index of an element inside ng -repeat changed . in terms of animation , it 'd very useful . keeping both "index-based" and "regular" move could be nice but the naming may have to be changed .

igorminar commented in the case @akoprow described , no "move" operation actually happens in the dom because the new node is added before the existing nodes and the "move" operations happens only in the browser 's render tree . this qualifies for the typical dom move operation and it can 't be animated as such . i think that in this case it would be good to understand what kind of animation /effect are you trying to achieve and based on that we can suggest or implement a solution .

ossdeveloper commented waiting for the solution ...

