nicoabie commented @guzart @matsko, i 've a pending pull request with an $attempted status . i didn 't used the word $submitted cause the submision can be prevented due to validations . @igorminar asked for another name instead of $attempted, i believe he doesn 't like the idea of $submitted. check #5574

mullr commented i 've been struggling with this as well ; ng -pristine / ngmodelcontroller .$pristine, as implemented , isn 't especially useful . the user needs at least some chance to enter information correctly before being scolded . a state which is set once the user has interacted with , but then left , the control would be appropriate . (i.e. blur has been fired )

proloser commented people have been struggling with premature validation , where the form inputs are marked as invalid before the user even touches the form . i recommended that they use .ng-dirty.ng-invalid but the problem is this does not change when the user submits it appears there are no class changes to the form when a submit of the form is attempted (regardless of fail or pass ). i have created a demo that shows a simple fix for this : http ://plnkr.co/edit/172vlv?p=preview and caters to both scenarios (premature validation and skipping validation altogether ) from a visual perspective . tl ;dr remove the ng -pristine class and add some sort of ng -submitted class when the form is submitted . i 'd prefer to have this on the actual form /ng-form directive rather than a third party directive .

coli commented validation on blur would be very nice

daviesgeek commented @matsko any updates on when that will get ported over to the js side ?

troch commented #5888 i 've send a pr for adding a $dirtyafter state for controls , which could greatly improve the decision to display or not inline validation messages . for example , an inline validation message can be shown using the condition "myform.myfield.$dirty || myform .myfield.$dirtyafter". i also think a form level "attempted" state would be a great idea , and it would work well along $dirtyafter by using the following condition for showing /hiding inline validation messages "myform.$attempted || myform .myfield.$dirty || myform .myfield.$dirtyafter"

nicoabie commented you are right @caitp, it is possible to achieve the way you described . i actually used this directive http ://code.realcrowd.com/on-the-bleeding-edge-advanced-angularjs-form-validation/ but it seems to me this should be angular 's the concept of $attempted.

proloser commented @jeffbcross @matsko so honestly , the @angular-ui team tried to tackle simplifying form validation a few different times with ui -input: https ://github.com/angular-ui/ui-input angular -ui/angular-ui-oldrepo#189 https ://groups.google.com/forum/?fromgroups=#!topic/angular-ui/cqn26-5nugu angular -ui/angular-ui-oldrepo#191 http ://plnkr.co/edit/3zmsnnpnfofwexsqlj2i?p=preview the gist was that you would create a template snippet which would switch between all the different input types , automatically generating labels , surrounding html (<div class ="form-group"> etc ), error messages , and so forth . the idea was that you would generally declare a template either app -wide or form -wide, etc . which would contain all the above scenarios (and have a dictionary of validation messages keyed by validation rule name ). this way you define your validation messages for the form instead of each input . we wanted to have it handle things like automatically generating the name and id and for (for labels ) properties based on the ng -model. example : <script type ="text/ng-template" id ="vert-form"> <div class ="form-group" ng -class="{error:$input.error}"> <ng-switch on ="$input.type"> <textarea ng -switch-when="textarea" name ="{{$input.name}}"></textarea> ... </ng-switch> <div class ="help" ng -repeat="(errorname, error ) in $input.$errors" ng -switch="errorname"> <span ng -switch-when="required">the {{$input.name}} field cannot be left empty </span> ... </div> </div> </script> <form name ="vert-form"> <!-- or <div ng -form="vert-form"> --> <ui-input type ="textarea" ng -model="data.item" required max -length="3" /> <!-- or <ui-input template ="vert-form" ...> to override /specify on a field -by-field basis --> </form> the type property was used to select which chunk of the template you were leveraging , the ng -model was expanded into id 's, names , and for -properties (all namespaced by the <form> or ng -form). the $input was a scope utility to access things such as formname .inputname.$error but also transclusion and properties of the <ui-input> and finally interpolated properties to make things easier like a $input.id or $input.name which could of course be explicitly overwritten on the ui -input tag . the problem : the big issue we ran into however was that we wanted to transclude to a few different places in the resultant template , and we weren 't able to use {{}} on the name property and get it to work . using repeaters on form inputs also proved difficult when trying to generate names or ids since <input id ="input[{{$index}}]" name ="input[{{$index}}]"> doesn 't work .

gh -naylor commented any idea on when input .$blurred and others are coming ?

matsko commented not sure how this issue came up again , but ... we 've already planned this out and the solution is to have a few extra states : inputorform .$submitted (if the submit event was run even if the form is invalid ). input .$visited or input .$blurred or input .$touched (not the same as $pristine since you need to enter data to make $pristine change ). the forms themselves are pretty good , but there needs to be more control over when messages are displayed . these flags should fill that hole .

